{"version":3,"sources":["button/Button.tsx","display/Display.tsx","Input/StartInput.tsx","Input/MaxInput.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Button","props","className","disabled","onClick","callback","text","Display","messageText","error","displayValue","maxValue","message","StartInput","type","onChange","e","value","currentTarget","addStartCount","startCount","MaxInput","addMaxCount","maxCount","App","useState","setMaxCount","setStartCount","setError","setMessage","setDisplayValue","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d73b7dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype ButtonPropsType = {\r\n    text: string,\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <button className={\"Button__counter\"} disabled={props.disabled}\r\n                    onClick={props.callback}>{props.text}\r\n            </button>\r\n\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\nexport type DisplayPropsType = {\r\n    displayValue: number\r\n    maxValue: number\r\n    message?: boolean\r\n    error?: boolean\r\n}\r\nexport function Display(props: DisplayPropsType) {\r\n    let messageText = (props.error) ? 'Incorrect value!' : 'enter values and press set'\r\n    return (\r\n        <div className={props.displayValue === props.maxValue ? 'DisplayNum DisplayRed' : 'DisplayNum'}>\r\n            {props.message ? messageText : props.displayValue}\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\n\r\ntype InputPropsType = {\r\n    text: string\r\n    startCount: number\r\n    addStartCount: (value: number) => void\r\n    error?: boolean\r\n    setStartCount: (value: number) => void\r\n\r\n}\r\n\r\nexport const StartInput: React.FC<InputPropsType> = (props) => {\r\n\r\n    const changeHandler = (value: number) => {\r\n        props.addStartCount(value)\r\n    }\r\n\r\n\r\n    // const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     let startValue = e.currentTarget.valueAsNumber\r\n    //     props.addStartCount(startValue)\r\n    // }\r\n\r\n    return (\r\n        <div className={\"SuperInput\"}>{props.text}\r\n            <input\r\n                className={props.error ? \"errorStart\" : \"\"}\r\n                type=\"number\" onChange={(e) => changeHandler(+e.currentTarget.value)}\r\n                value={props.startCount}/>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\ntype InputPropsType = {\r\n    text: string\r\n    addMaxCount: (value: number) => void\r\n    maxCount: number\r\n    error?: boolean\r\n}\r\n\r\nexport const MaxInput: React.FC<InputPropsType> = (props) => {\r\n\r\n    const changeHandler = (value: number) => {\r\n        props.addMaxCount(value)\r\n    }\r\n\r\n    return (\r\n        <div className={\"SuperInput\"}>{props.text}\r\n            <input\r\n                className={props.error ? \"errorMax\" : \"\"}\r\n                type=\"number\" onChange={(e) => changeHandler(+e.currentTarget.value)}\r\n                value={props.maxCount}/>\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\n\nimport './App.css';\nimport {Button} from \"./button/Button\";\nimport {Display} from \"./display/Display\";\nimport {StartInput} from \"./Input/StartInput\";\nimport {MaxInput} from \"./Input/MaxInput\";\n\nconst App = () => {\n    const [maxCount, setMaxCount] = useState(0)\n    const [startCount, setStartCount] = useState(0)\n    const [error, setError] = useState<boolean>(false)\n    const [message, setMessage] = useState<boolean>(false)\n    const [displayValue, setDisplayValue] = useState(0);\n\n    // if () {\n    // setError(true)\n    // }\n    // useEffect(() => { }, [displayValue, maxCount])\n    //  [] => only first render\n    // [asfaasgasfasf] => whent changed value in array\n    // no [] => all times\n\n\n    const incValue = () => {\n        setDisplayValue(displayValue + 1);\n        console.log(displayValue)\n        if (displayValue >= maxCount) {\n            setDisplayValue(maxCount)\n        }\n    }\n    const resetValue = () => {\n        setDisplayValue(startCount);\n    }\n\n    const setValue = () => {\n        setMessage(false)\n        setError(false)\n        setDisplayValue(startCount)\n    }\n\n    const addStartCount = (value: number) => {\n        setMessage(true)\n        if (value > maxCount || value < 0 || value === maxCount) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        setStartCount(value)\n    }\n\n    const addMaxCount = (value: number) => {\n        setMessage(true)\n        if (value < 0 || value < startCount || value === startCount) {\n            setError(true)\n        } else {\n            setError(false)\n        }\n        setMaxCount(value)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"Block\">\n                <div className=\"display\">\n                    <StartInput text={'start value:'}\n                                addStartCount={addStartCount}\n                                startCount={startCount}\n                                error={error}\n                                setStartCount={setStartCount}/>\n                    <MaxInput text={'max value:'}\n                              addMaxCount={addMaxCount}\n                              maxCount={maxCount}\n                              error={error}/>\n                </div>\n                <div className=\"counter\">\n                    <Button\n                        text={'set'}\n                        callback={setValue}\n                        disabled={(maxCount < 0 || startCount === maxCount || startCount < 0 || startCount > maxCount || !message)}\n                        //\n                    />\n                </div>\n            </div>\n            {/*-------------------------------------------------------------------------------------------------------*/}\n            <div className=\"Block\">\n                <div className=\"display\">\n                    <Display displayValue={displayValue} maxValue={maxCount} error={error} message={message}/>\n                </div>\n                <div className=\"counter\">\n                    <Button\n                        text={'inc'}\n                        disabled={message || maxCount === displayValue}\n                        callback={incValue}\n                    />\n                    <Button\n                        text={'res'}\n                        callback={resetValue}\n                        disabled={startCount === displayValue || maxCount < 0 || startCount < 0 || startCount > maxCount || startCount > displayValue}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}